# -*- coding: utf-8 -*-
"""
Created on Thu Mar 11 21:06:53 2021

@author: joy_c
"""
import os
from SALib.sample import saltelli
from SALib.sample import morris as morris_sampling 

folder = os.path.dirname(__file__)

def define_inputs(model):
    '''
    Define the model inputs (referred to as "problem") to be used for sampling by ``SALib``.
    
    Parameters
    ----------
    model : :class:`biosteam.Model`
        Uncertainty model with defined paramters and metrics.

    Returns
    -------
    inputs : dict
        A dict containing model inputs for sampling by ``SALib``.

    See Also
    --------
    `SALib Basics <https://salib.readthedocs.io/en/latest/basics.html#an-example>`_

    '''
    params = model.get_parameters()
    problem = {
        'num_vars': len(params),
        'names': [i.name for i in params],
        'bounds': [[0, 1]]*len(params)
        }
    return problem

# TODO: incorporate sampling from different distributions
def generate_samples(model, inputs, kind, N, seed=None, **kwargs):
    '''
    Generate samples for sensitivity analysis using ``SALib``.
    
    Parameters
    ----------
    model : :class:`biosteam.Model`
        Uncertainty model with defined paramters and metrics.
    inputs : dict
        A dict generated by :func:`~.sensitivity.define_inputs` to be used for ``SALib``,
        keys should include "num_vars", "names", and "bounds".
    kind : str
        Can be "Morris" (for Morris analysis) or "Saltelli" (for Sobol analysis).
    N : int
        The number of trajectories (Morris) or samples.
    seed : int
        Seed to generate a random number.
    
    Returns
    -------
    samples: array
        Samples to be used for the indicated sensitivies analyses.
    
    See Also
    --------
    `SALib.sample.morris <https://salib.readthedocs.io/en/latest/api.html?highlight=morris#method-of-morris>`_
    `SALib.sample.saltelli <https://salib.readthedocs.io/en/latest/api/SALib.sample.html?highlight=saltelli#module-SALib.sample.saltelli>`_
    '''
    params = model.get_parameters()
    D = len(params)
    if kind.capitalize() == 'Morris':
        sample = morris_sampling.sample(inputs, N=N, seed=seed, **kwargs)
        for i in range(D):
            lower = params[i].distribution.lower[0]
            scale = params[i].distribution.upper[0] - lower
            sample[:,i] = lower + sample[:,i] * scale
        return sample
    elif kind.capitalize() == 'Saltelli':
        sample = saltelli.sample(inputs, N=N, seed=seed, **kwargs)
        for i in range(D):
            sample[:,i] = params[i].distribution.inv(sample[:,i])
        return sample
    else:
        raise ValueError('kind can only be "Morris" or "Saltelli", ' \
                         f'not "{kind}".')


# %%

if __name__ == '__main__':
    from cornstover_models.model import model
    import numpy as np
    M_sample = model.sample(rule='Saltelli', N=10, seed=311)
    file_name = os.path.join(folder, 'sample_matrix.tsv')
    np.savetxt(file_name, M_sample, delimiter='\t')
